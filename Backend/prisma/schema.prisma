// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}



model User {
  userID      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  password String
  avatarUrl String @default("https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y")
  username String @unique 
  verified Boolean @default(false)
  isAdmin Boolean @default(false)
  createdAt DateTime @default(now())
  
  products Product[]
  ProductEndorsers ProductEndorsers[]

  posts Posts[]
  postComments PostComments[]
  postLikes PostLikes[]
}



model Product {
  productID      String   @id @default(auto()) @map("_id") @db.ObjectId
  productName String
  productDescription String
  productPrice Float
  productPricePer String
  productImageUrl String
  productOwner User @relation(fields: [productOwnerId], references: [userID])
  productOwnerId String @db.ObjectId
  createdAt DateTime @default(now())

  productEndorsers ProductEndorsers[]
  featuredProducts FeaturedProducts[]
}

model FeaturedProducts {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productID String @db.ObjectId
  product Product @relation(fields: [productID], references: [productID])
}

model ProductEndorsers {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productID String @db.ObjectId
  userID String @db.ObjectId
  product Product @relation(fields: [productID], references: [productID])
  user User @relation(fields: [userID], references: [userID])
}


model Conversations {
  conversationID     String   @id @default(auto()) @map("_id") @db.ObjectId
  participantFirstID String @db.ObjectId
  participantSecondID String @db.ObjectId 
  lastMessageDate DateTime @default(now())
}

model Messages {
  messageID     String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationID String @db.ObjectId
  senderID String @db.ObjectId
  messageContent String
  messageDate DateTime @default(now())
}

model Posts {
  postID     String   @id @default(auto()) @map("_id") @db.ObjectId
  postTitle String
  postContent String
  postDate DateTime @default(now())
  postAuthorID String @db.ObjectId
  postAuthor User @relation(fields: [postAuthorID], references: [userID])
  postComments PostComments[]
  postLikes PostLikes[]
}


model PostComments {
  commentID     String   @id @default(auto()) @map("_id") @db.ObjectId
  commentContent String
  commentDate DateTime @default(now())
  commentAuthorID String @db.ObjectId
  commentAuthor User @relation(fields: [commentAuthorID], references: [userID])
  postID String @db.ObjectId
  post Posts @relation(fields: [postID], references: [postID])
}


model PostLikes {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  postID String @db.ObjectId
  userID String @db.ObjectId
  post Posts @relation(fields: [postID], references: [postID])
  user User @relation(fields: [userID], references: [userID])
}